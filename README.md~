# *Cinema Ticket Booking Platform*

# **1. Project Overview**
The Cinema Ticket Booking Platform is a web-based application designed to streamline movie discovery, ticket booking, showtime selection, and secure payment processing. Built with a robust Java Spring Boot backend and a responsive frontend, it ensures scalability, security, and ease of deployment.
This repository hosts a personal project, featuring secure authentication (JWT with RS256), encrypted communication (SSL/TLS), and payment integration via VNPay and Casso.

https://github.com/PigCassoKien/TicketCinemaWeb

# **2. Technologies**
## **Backend**
- **Framework**: Spring Boot 3.3.1
- **Language**: Java 21
- **Database**: MySQL 8.0.32
- **Security**: JWT (RS256 algorithm, 2048-bit keys) via `jjwt` 0.11.5
- **API Documentation**: Springdoc OpenAPI (Swagger UI)
- **Dependencies**:
  - `spring-boot-starter-data-jpa` for ORM
  - `spring-boot-starter-security` for authentication
  - `spring-boot-starter-mail` for email notifications
  - `mysql-connector-j` for database connectivity
  - `springdoc-openapi-starter-webmvc-ui` 2.2.0 for API docs
  - `lombok` for code simplicity
  - `gson` 2.8.9 and `json` 20210307 for JSON handling
  - `jsoup` 1.16.1 for HTML parsing
  - `jackson-databind` 2.15.0 for JSON serialization

## **Frontend**
- Core FrameWork: React
- Routing: React Router DOM
- Authentication: JWT Decode
- HTTP Requests: Axios.
- Styling: Tailwind CSS
- Deployed using Nginx as a reverse proxy

## **Additional Tools**
- **Docker**: Enables rapid and consistent deployment across environments.
- **Nginx**: Configured as a web server and reverse proxy within Docker containers.
- **Payment Integration**: VNPay and Casso Webhook for secure transactions. 
- **Email Service**: Gmail SMTP for sending verification emails. 
<br/><br/>

## **3. Installation**
### **Prerequisites**
- Install `docker` and `docker-compose` on your system.
- Ensure ports `80`, `8080`, `3307`, and `32346` are available.

### **Setup Instructions**
1. Clone the repository to your local machine:
   ```shell
   git clone https://github.com/PigCassoKien/TicketCinemaWeb
   cd mainproject
   ```
2. Build and start the application:
   ```shell
   docker-compose up --build -d
   ```
   - This command builds the frontend (React), backend (Spring Boot), and MySQL database containers.
3. To stop the application, press `Ctrl + C` and run:
   ```shell
   docker-compose down
   ```

## **Deployment Notes**
- The backend operates on port 8080 with SSL enabled (`server.ssl.enabled=true`). Ensure the `keystore.p12` file is present in `src/main/resources` of the backend directory.
- The database uses `spring.jpa.hibernate.ddl-auto=update`. For production, consider setting to `validate` or `none` to prevent unintended schema changes.

<br/>

# **4. Access Information**
## **A. Available Services**
- **Main Website (Frontend)**: [http://localhost](http://localhost)
  - Displays movie content and facilitates ticket booking and payment.
  <br/><br/>
- **API Documentation (Backend)**: [https://localhost:8080/swagger-ui/index.html](https://localhost:8080/swagger-ui/index.html)
  - Provides details of RESTful API endpoints processed by the backend.
  <br/><br/>
- **Database Management (phpMyAdmin)**: [http://localhost:8081](http://localhost:8081)
  - Visual interface for managing the MySQL database using [phpMyAdmin](https://www.phpmyadmin.net/).
  <br/>

## **B. Login Credentials**
| Username            | Password        | Role          |
|---------------------|---------------  |---------------|
| superadmin          | SuperAdmin123!  | Super Admin   |
| kienduong123        | 4Conthanlan@    | Admin         |
| uuserr111           | 5Conthanlan@    | User          |
- Alternatively, you can register a new USER account through the registration interface.
- *NOTE*: The email must be valid in order to receive the OTP verification code. 

## **C. VNPay Payment Test Details**
- **Bank**: `NCB`
- **Card Number**: `9704198526191432198`
- **Cardholder Name**: `NGUYEN VAN A`
- **Expiry Date**: `07/15`
- **OTP**: `123456`
<br/><br/>

# **5. Features**
## **A. User Features**
- **Account Management**:
  - Registration with email verification.
  - Login and logout functionality.
  - Password recovery via email confirmation.
- **Movie Exploration**:
  - Search movies by keyword.
- **Ticket Booking**:
  - Select showtimes (date, time, auditorium).
  - Choose seats interactively.
  - Payment processing via VNPay (QR Code, Domestic/International Cards) or QR Banking Method.
  - Receive e-tickets and payment receipts via email upon successful transactions.

## **B. Admin Features**
- Manage user accounts.
- Perform CRUD operations on movies, showtimes, auditoriums, seats, and payment records.
<br/><br/>

# **6. Security**
## **Authentication and Authorization**
- **JWT (JSON Web Token)**:
  - **Algorithm**: `RS256` with 2048-bit keys.
  - **Token Lifetime**: Access token expires in 1 hour (`app.jwtExpirationInMs=3600000`), refresh token expires in 7 days (`app.jwtRefreshExpirationInMs=604800000`).
  - **Claims**:
    - `roles`: Defines user roles (`SUPER_ADMIN`, `ADMIN`, `USER`).
    - `sub`: Contains the username.
    - `iat`: Token issuance timestamp.
    - `exp`: Token expiration timestamp.

## **SSL/TLS**
- The backend operates on port 8080 with SSL enabled (`server.ssl.enabled=true`), utilizing a `keystore.p12` certificate for secure HTTPS communication.

<br/>
